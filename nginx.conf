worker_processes auto;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;

    lua_package_path "/usr/local/lua_modules/share/lua/5.1/?.lua;;";

    server {
        listen ${PORT};

        location /disk {
            content_by_lua_block {
                local method = ngx.req.get_method()

                if method == "POST" then
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say("{\"error\": \"Missing request body.\"}")
                        return
                    end

                    local json = require("cjson")
                    local data = json.decode(body)
                    if not data or data.num_bytes == nil then
                        ngx.status = 400
                        ngx.say("{\"error\": \"Invalid JSON payload. Expected {num_bytes: n}\"}")
                        return
                    end

                    local num_bytes = tonumber(data.num_bytes)
                    if not num_bytes then
                        ngx.status = 400
                        ngx.say("{\"error\": \"Invalid num_bytes value. Must be a number.\"}")
                        return
                    end

                    local cmd = "/usr/local/bin/write-bytes.sh handle_post " .. tostring(num_bytes) .. " 2>&1"
                    local f = io.popen(cmd)
                    local result = f:read("*a")
                    local status = f:close()

                    if status ~= 0 and status ~= true then
                        ngx.status = 500
                        ngx.header["Content-Type"] = "application/json"
                        ngx.say("{\"error\": \"Script execution failed\", \"script_output\": \"", result:gsub("\"", "\\\""), "\", \"exit_status\": \"", tostring(status), "\"}")
                    else
                        ngx.header["Content-Type"] = "text/plain"
                        ngx.say(result)
                    end

                elseif method == "GET" then
                    -- Execute the shell script for GET method
                    local cmd = "/usr/local/bin/write-bytes.sh handle_get 2>&1"
                    local f = io.popen(cmd)
                    local result = f:read("*a")
                    local status = f:close()

                    if status ~= 0 and status ~= true then
                        ngx.status = 500
                        ngx.header["Content-Type"] = "application/json"
                        ngx.say("{\"error\": \"GET script failed\", \"script_output\": \"", result:gsub("\"", "\\\""), "\", \"exit_status\": \"", tostring(status), "\"}")
                    else
                        -- Script is expected to return JSON for GET
                        ngx.header["Content-Type"] = "application/json"
                        ngx.say(result)
                    end

                else
                    ngx.status = 405
                    ngx.header["Allow"] = "GET, POST"
                    ngx.say("{\"error\": \"Method Not Allowed. Only GET and POST are supported.\"}")
                end
            }
        }

        location / {
            return 404 "{\"error\": \"Not Found\"}";
        }
    }
}
